(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{217:function(t,a,s){t.exports=s.p+"assets/img/MySQL.0d2070e8.png"},233:function(t,a,s){"use strict";s.r(a);var r=s(2),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("div",{staticClass:"tip custom-block"},[r("p",[t._v("对于MySQL我们经常会停留在“会用”的阶段，但是要想深入去学习MySQL，我们还必须搞懂其内部的运行原理。所以今天我们来谈谈，当我们在执行一条SQL查询语句时，这其中到底经历了怎样的过程？")])]),t._v(" "),r("h2",{attrs:{id:"mysql的组成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mysql的组成","aria-hidden":"true"}},[t._v("#")]),t._v(" MySQL的组成")]),t._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[t._v("首先我们来看看MySQL的逻辑架构")])]),t._v(" "),r("div",{staticStyle:{"margin-top":"5px"},attrs:{align:"center"}},[r("img",{attrs:{src:s(217),width:"80%",height:"80%"}}),t._v(" "),r("div",[t._v("MySQL的逻辑架构图")])]),t._v(" "),r("p",[t._v("从上图，我们可以看到MySQL主要可分为两部分："),r("strong",[t._v("Server层")]),t._v("和"),r("strong",[t._v("存储引擎层")])]),t._v(" "),r("p",[t._v("Server层包含了连接器、查询缓存、分析器、优化器、执行器等，涵盖了MySQL的大多数核心服务。")]),t._v(" "),r("p",[t._v("存储引擎层则负责数据的存储和提取。其中最常用的存储引擎时InnoDB，它从MySQL5.5.5版本开始成为默认引擎。")]),t._v(" "),r("h2",{attrs:{id:"连接器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#连接器","aria-hidden":"true"}},[t._v("#")]),t._v(" 连接器")]),t._v(" "),r("p",[t._v("当我们使用MySQL时，第一步便是要建立连接。而这一步，正是连接器的工作。")]),t._v(" "),r("p",[t._v("我们通常会采用如下命令进行数据库连接：")]),t._v(" "),r("div",{staticClass:"language-sql extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sql"}},[r("code",[t._v("mysql "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("h$ip "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("P$port "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("u$"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("user")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("p\n")])])]),r("p",[t._v("$ip 代表连接的IP地址"),r("br"),t._v("\n$port 代表连接的端口号"),r("br"),t._v("\n$user 代表连接的用户名")]),t._v(" "),r("p",[t._v("执行上面连接命令后，便会提示你输入密码。当然你也可以直接把密码写在-p的后面，但是出于安全考虑，我并不建议你这样做(这样做的话，别人用‘history’命令就可以轻易看到你的密码了)。")]),t._v(" "),r("p",[t._v("输完密码后，连接器便会判断密码是否正确，若正确，则建立连接。同时，还会在数据库中查找当前你登录的这个账号所拥有的操作权限。")]),t._v(" "),r("p",[t._v("此时，如果你对这个账号的权限做出了修改，那么你需要重新建立连接，才能使得权限生效。")]),t._v(" "),r("h2",{attrs:{id:"查询缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查询缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 查询缓存")]),t._v(" "),r("div",{staticClass:"warning custom-block"},[r("p",[t._v("此功能已在MySQL8.0被删除")])]),t._v(" "),r("p",[t._v("当我们执行一条查询语句时，它会先判断是否命中了查询缓存。若命中，MySQL则会直接返回结果。而不用再做后续的复杂操作。")]),t._v(" "),r("p",[t._v("可见，查询缓存能有效的加快我们的查询速度。但是绝大多数的情况下，我并不建议你使用查询缓存。因为，一旦你对某个表做出了一个更新，那么就会导致这张表的查询缓存全部失效。")]),t._v(" "),r("p",[t._v("试想一下，当我们花费大量精力将查询结果缓存起来，但是还没用到，它就失效了。这很明显是件吃力不讨好的行为。所以除非你能确定你的表不会频繁的更新，如系统配置表，否则不要轻易使用查询缓存。")]),t._v(" "),r("h2",{attrs:{id:"分析器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分析器","aria-hidden":"true"}},[t._v("#")]),t._v(" 分析器")]),t._v(" "),r("ul",[r("li",[t._v("词法分析")])]),t._v(" "),r("p",[t._v("拿到一条语句后，分析器会将你输入语句的单词按空格拆分，进行分析。如，select就是一条查询语句，update就是一条更新语句。")]),t._v(" "),r("ul",[r("li",[t._v("语法分析")])]),t._v(" "),r("div",{staticClass:"language-sql extra-class"},[r("pre",{pre:!0,attrs:{class:"language-sql"}},[r("code",[t._v("elect "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" T\n")])])]),r("p",[t._v("语法分析，则是判断你输入的查询语句是否有语法错误，如上面的语句中select缺少了‘s’，则会提示错误信息给你：")]),t._v(" "),r("p",[t._v("You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'elect * from T' at line 1")]),t._v(" "),r("p",[t._v("我们在排查错误时，一般关注‘syntax to use near’后面的提示。")]),t._v(" "),r("h2",{attrs:{id:"优化器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优化器","aria-hidden":"true"}},[t._v("#")]),t._v(" 优化器")]),t._v(" "),r("p",[t._v("优化器则是针对用户所建立的索引，进行一个筛选，选出一个最高效的索引。")]),t._v(" "),r("p",[t._v("那么这个选择的过程当中索引是否会选错？这个索引又是如何选择的呢？这个在我之后的文章会讲解到。")]),t._v(" "),r("h2",{attrs:{id:"执行器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#执行器","aria-hidden":"true"}},[t._v("#")]),t._v(" 执行器")]),t._v(" "),r("p",[t._v("执行器在执行语句之前，会先在优化器阶段判断当前用户是否有对表T的操作权限，若无则返回错误。")])])}),[],!1,null,null,null);a.default=e.exports}}]);